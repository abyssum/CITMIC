load("~/GEP.Rdata")
load("D:/Users/89800/Desktop/新建文件夹 (2)/8.28/cell课题/go_cell_inter.Rdata")
load("D:/Users/89800/Desktop/新建文件夹 (2)/8.28/cell课题/go_cell_inter_10_350.Rdata")
usethis::use_data(matrix_cell_go_inter,matrix_cell_go_score,GEP,internal = TRUE, overwrite = TRUE)
usethis::use_package("igraph")
usethis::use_package("stats")
usethis::use_package("fmatch")
usethis::use_package("fastmatch")
usethis::use_package("parallel")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
CITMI_CData[["GEP"]]<-GEP
CITMIC_Data<-env(GEP,matrix_cell_go_inter,matrix_cell_go_score)
CITMIC_Data<-env(GEP,matrix_cell_go_inter,matrix_cell_go_score)
CITMIC_Data<-new_environment(GEP,matrix_cell_go_inter,matrix_cell_go_score)
library(env)
library(rlang)
CITMIC_Data<-new_environment(GEP,matrix_cell_go_inter,matrix_cell_go_score)
CITMIC_Data<-env(GEP,matrix_cell_go_inter,matrix_cell_go_score)
CITMIC_Data<-env()
CITMIC_Data[["GEP"]]<-GEP
View(CITMIC_Data)
CITMIC_Data[["matrix_cell_go_inter"]]<-matrix_cell_go_inter
CITMIC_Data[["matrix_cell_go_score"]]<-matrix_cell_go_score
View(CITMIC_Data)
usethis::use_data(CITMIC_Data, compress = "xz",overwrite = TRUE)
devtools::document()
usethis::use_vignette("CITMIC")
devtools::document()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
usethis::use_pkgdown()
usethis::use_pkgdown()
pkgdown::build_site()
devtools::document()
devtools::document()
library(CITMIC)
devtools::document()
library(CITMIC)
# Obtain the example data
GEP<-GetData_CITMIC("GEP")
# Calculate the zscore
GT_score<-CITMIC(GEP,lamping=0.90)
devtools::document()
library(CITMIC)
View(CITMIC_Data)
rm("CITMIC_Data")
CITMIC_Data<-env()
CITMIC_Data[["GEP"]]<-GEP
CITMIC_Data[["matrix_cell_go_inter"]]<-matrix_cell_go_inter
CITMIC_Data[["matrix_cell_go_jaccard"]]<-matrix_cell_go_score
usethis::use_data(CITMIC_Data, compress = "xz",overwrite = TRUE)
devtools::document()
library(CITMIC)
library(CITMIC)
Sys.setenv('_R_CHECK_SYSTEM_CLOCK_' = 0)
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs10.01.1/bin/gswin64c.exe")
devtools::document()
library(CITMIC)
load("D:/Users/89800/Desktop/新建文件夹 (2)/CellRankScore/dddddddddddddddddddddddddddddddddddddddd.RData")
GEP<-exp_SKCM_fpkm_tumor_aggregate_log2_20000
lnScore<-CITMIC(GEP,damping=0.90)
devtools::document()
remove.packages("igraph")
install.packages("igraph")
#Detect the Number of CPU Cores(Select the number of cl.cores to apply to CITMIC based on detectCores())
detectCores()
#Detect the Number of CPU Cores(Select the number of cl.cores to apply to CITMIC based on detectCores())
library(parallel)
detectCores()
# Obtain the example data
GEP<-GetData_CITMIC("GEP")
#Detect the Number of CPU Cores(Select the number of cl.cores to apply to CITMIC based on detectCores())
library(parallel)
library(CITMIC)
detectCores()
# Obtain the example data
GEP<-GetData_CITMIC("GEP")
# Calculate the Cell infiltration(lnScore)
lnScore<-CITMIC(GEP,weighted = TRUE,base = 10,damping=0.90,cl.cores=1,cell.type=NULL)
CITMIC<-function(GEP,weighted = TRUE,base = 10,damping=0.90,cl.cores=1,cell.type=NULL){
GEP<-GEP
cl<-makeCluster(cl.cores)
clusterExport(cl,varlist = "GEP",envir = environment())
clusterEvalQ(cl, {
matrix_cell_go_inter<- CITMIC::GetData_CITMIC("matrix_cell_go_inter")
matrix_cell_go_jaccard<-CITMIC::GetData_CITMIC("matrix_cell_go_jaccard")
go_cell_score_row<-function(a,table,del,c){
score_row<-rep(0,c)
for(j in 1:length(a)){
if(a[j]!=""){
gene<-unlist(strsplit(a[j], split = ","))
location<-fastmatch::fmatch(gene, table)
dell<- na.omit(del[location])
de_score1<-median(as.numeric(dell))
if (!is.na(de_score1)) {
score_row[j]<-de_score1
}
}
}
return(score_row)
}
median_inter<-function(matrix_cell_go_inter,matrix_cell_go_jaccard,GEP){
GEPscore<-cbind(rownames(GEP),GEP[,1])
table <- GEPscore[,1]
del <- GEPscore[, 2]
median_score<-matrix(0,nrow=length(rownames(matrix_cell_go_inter)),ncol=length(colnames(matrix_cell_go_inter)))
for(k in 1:length(rownames(matrix_cell_go_inter))){
Genes_vector<-matrix_cell_go_inter[k,]
row<-go_cell_score_row(Genes_vector,table,del,length(colnames(matrix_cell_go_inter)))
median_score[k,]<-row
}
matrix_median_genes<-median_score*matrix_cell_go_jaccard
colnames(matrix_median_genes)<-colnames(matrix_cell_go_inter)
rownames(matrix_median_genes)<-rownames(matrix_cell_go_inter)
matrix_cell_score<-t(matrix_median_genes)%*%matrix_median_genes
matrix_cell_score[is.na(matrix_cell_score)]<-0
diag(matrix_cell_score)<-0
return(matrix_cell_score)
}
})
result_cell<-parLapply(cl=cl,X=colnames(GEP),function(x){
Zvalue<-data.frame(cbind(rownames(GEP),GEP[,x]))
Zvalue <- data.frame(Zvalue[!is.infinite(Zvalue[,2]),])
Zvalue <- data.frame(Zvalue[!is.na(Zvalue[,2]),])
Zvalue <- data.frame(Zvalue[!is.nan(Zvalue[,2]),])
Zvalue[,2]<-as.numeric(Zvalue[,2])
Z<-data.frame(Zvalue[,2])
rownames(Z)<-Zvalue[,1]
score<-median_inter(matrix_cell_go_inter,matrix_cell_go_jaccard,Z)
return(score)
})
names(result_cell)<-colnames(GEP)
stopCluster(cl)
random_crosstalk<-function(result_cell,damping=damping){
adj.final<-as.matrix(result_cell)
graph = graph.adjacency(adj.final,mode=c("undirected"),weighted=weighted,add.rownames=T)
temp = page.rank(graph, vids=V(graph), directed=FALSE, damping=damping, weights=NULL)
rank = temp$vector
rank1 = as.matrix(rank)
return(rank1)
}
Score_rankwalk<-data.frame(row.names=rownames(result_cell[[1]]))
for(i in names(result_cell)){
score<-random_crosstalk(result_cell[[i]],damping)
Score_rankwalk<-cbind(
Score_rankwalk,
score[rownames(Score_rankwalk),]
)
}
colnames(Score_rankwalk)<-names(result_cell)
cell_num<-apply(Score_rankwalk,2,function(x){
y=log(x,base=base)
return(y)
})
lnscore<-(cell_num-min(cell_num))/(max(cell_num)-min(cell_num))
if(is.null(cell.type)){
lnscore<-lnscore
}else{
lnscore[cell.type,]
}
return(lnscore)
}
#Detect the Number of CPU Cores(Select the number of cl.cores to apply to CITMIC based on detectCores())
library(parallel)
library(CITMIC)
detectCores()
# Obtain the example data
GEP<-GetData_CITMIC("GEP")
# Calculate the Cell infiltration(lnScore)
lnScore<-CITMIC(GEP,weighted = TRUE,base = 10,damping=0.90,cl.cores=1,cell.type=NULL)
#Detect the Number of CPU Cores(Select the number of cl.cores to apply to CITMIC based on detectCores())
library(parallel)
library(igraph)
library(CITMIC)
detectCores()
# Obtain the example data
GEP<-GetData_CITMIC("GEP")
# Calculate the Cell infiltration(lnScore)
lnScore<-CITMIC(GEP,weighted = TRUE,base = 10,damping=0.90,cl.cores=1,cell.type=NULL)
head(lnScore)
devtool::document()
devtools::document()
devtools::document()
devtools::document()
